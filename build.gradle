plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id "io.github.lognet.grpc-spring-boot" version '5.1.5'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.11"
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "ru/aston/EmailVerificationService/*",
                    "ru/aston/notificationservice/NotificationServiceApplication.class",
                    "ru/aston/notificationservice/aspect/*",
            ])
        }))
    }
}

group = 'ru.aston'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url = "https://nexus.astondevs.ru/repository/MeetingRoom-New-maven/"
        credentials {
            username = "nx-meetingroom-new-maven"
            password = "kCF1x2BmS5Gd"
        }
    }
}

ext {
    set('mapstructVersion', "1.5.5.Final")
    set('springDocVersion', "2.2.0")
}

dependencies {
    testImplementation 'org.grpcmock:grpcmock-spring-boot:0.10.1'
    testImplementation 'org.grpcmock:grpcmock-junit5:0.9.3'
    implementation 'io.github.lognet:grpc-spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth:3.1.5")
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.5'
    runtimeOnly("io.opentelemetry.instrumentation:opentelemetry-logback-1.0:1.9.2-alpha")
    implementation("io.micrometer:micrometer-observation")
    implementation("io.micrometer:micrometer-tracing-bridge-brave")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("io.github.openfeign:feign-micrometer:13.0")
    implementation("org.springframework.boot:spring-boot-starter-aop:3.1.5")
    implementation("io.zipkin.reporter2:zipkin-reporter-brave:2.16.3")
    implementation 'net.logstash.logback:logstash-logback-encoder:7.3'
    implementation("org.springframework.kafka:spring-kafka")
    implementation 'ru.aston:kafka-dto-library:1.11'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:junit-jupiter'
    implementation 'com.github.javafaker:javafaker:1.0.2'
}

compileJava {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}
